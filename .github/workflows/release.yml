name: Release

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release branch
        env:
          VERSION: ${{ github.run_number }}
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout main
          git pull origin main
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Build Docker image
        run: |
          docker build -t $REGISTRY:${{ github.run_number }} .
          docker tag $REGISTRY:${{ github.run_number }} $REGISTRY:${{ github.run_number }}_latest

      - name: Login to Yandex Container Registry
        run: |
          docker login -u oauth -p ${{ secrets.YC_OAUTH_TOKEN }} cr.yandex

      - name: Push Docker image
        run: |
          docker push $REGISTRY:${{ github.run_number }}
          docker push $REGISTRY:${{ github.run_number }}_latest

      - name: Get previous tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT

      - name: Create git tag first
        env:
          VERSION: ${{ github.run_number }}
        run: |
          git tag v${VERSION}
          git push origin v${VERSION}

      - name: Generate changelog from commits
        id: changelog
        env:
          VERSION: ${{ github.run_number }}
        run: |
          if [ -z "${{ steps.get_previous_tag.outputs.previous_tag }}" ]; then
            COMMITS=$(git log main --pretty=format:"- %h: %s" --no-merges || echo "- Первый релиз")
          else
            COMMITS=$(git log ${{ steps.get_previous_tag.outputs.previous_tag }}..v${VERSION} --pretty=format:"- %h: %s" --no-merges | grep -v "docs: update changelog for v || echo "- Нет новых коммитов")
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        env:
          VERSION: ${{ github.run_number }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          {
            echo "## v${VERSION} — $(date +'%Y-%m-%d')"
            echo ""
            echo "${COMMITS}"
            echo ""
            cat CHANGELOG.md 2>/dev/null || echo ""
          } > CHANGELOG.tmp.md
          mv CHANGELOG.tmp.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${VERSION}" || echo "Нет изменений в CHANGELOG"
          git push origin releases/${VERSION}

      - name: Create Pull Request to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.run_number }}
        run: |
          gh pr create \
            --base main \
            --head releases/${VERSION} \
            --title "Release v${VERSION} - Update CHANGELOG" \
            --body "This PR updates CHANGELOG.md for release v${VERSION}." \
            --label "release"

      - name: Create GitHub issue for release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.run_number }}
          REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          BODY=$(printf "## Релиз v${VERSION}\n\n**Дата**: %s\n**Автор**: %s\n**Версия**: %s\n**Коммиты**:\n%s\n\n**Docker-образ**: cr.yandex/%s/app:${VERSION}" \
            "$(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            "${{ github.actor }}" \
            "${VERSION}" \
            "${COMMITS}" \
            "${REGISTRY_ID}")
          gh issue create --title "Release v${VERSION}" --body "$BODY" --label "release"
